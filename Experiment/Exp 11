#include <stdio.h>
#include <stdlib.h>

#define MAX 100 
int adjMatrix[MAX][MAX]; 
int visited[MAX];        


void initializeGraph(int vertices) {
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            adjMatrix[i][j] = 0;
        }
        visited[i] = 0;
    }
}

// Function to add an edge to the graph
void addEdge(int start, int end) {
    adjMatrix[start][end] = 1;  
}

void bfs(int startVertex, int vertices) {
    int queue[MAX], front = 0, rear = -1;
    visited[startVertex] = 1;
    queue[++rear] = startVertex;

    printf("BFS Traversal: ");

    while (front <= rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

    
        for (int i = 0; i < vertices; i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}


void dfs(int vertex, int vertices) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    for (int i = 0; i < vertices; i++) {
        if (adjMatrix[vertex][i] == 1 && !visited[i]) {
            dfs(i, vertices);
        }
    }
}


void resetVisited(int vertices) {
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }
}

int main() {
    int vertices, edges, startVertex, u, v;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    initializeGraph(vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);


    for (int i = 0; i < edges; i++) {
        printf("Enter edge (start vertex and end vertex): ");
        scanf("%d %d", &u, &v);
        addEdge(u, v);
    }

    printf("Enter the starting vertex for BFS and DFS: ");
    scanf("%d", &startVertex);


    resetVisited(vertices);  
    bfs(startVertex, vertices);

   
    resetVisited(vertices); 
    printf("DFS Traversal: ");
    dfs(startVertex, vertices);
    printf("\n");

    return 0;
}
