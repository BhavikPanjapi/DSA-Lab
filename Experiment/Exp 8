#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};


struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(0);
    }
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}


void insertAtBeginning(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    
    if (*head == NULL) { 
        *head = newNode;
        newNode->next = *head;  
        newNode->prev = *head;  
    } else {
        struct Node* last = (*head)->prev;
        newNode->next = *head;
        newNode->prev = last;
        last->next = newNode;
        (*head)->prev = newNode;
        *head = newNode;  
    }
    printf("%d inserted at the beginning.\n", value);
}


void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);

    if (*head == NULL) { 
        *head = newNode;
        newNode->next = *head; 
        newNode->prev = *head; 
    } else {
        struct Node* last = (*head)->prev;
        newNode->next = *head;  
        (*head)->prev = newNode; 
        newNode->prev = last;
        last->next = newNode; 
    }
    printf("%d inserted at the end.\n", value);
}


void deleteNode(struct Node** head, int value) {
    if (*head == NULL) {
        printf("List is empty! Cannot delete.\n");
        return;
    }

    struct Node* temp = *head;

  
    if (temp->data == value) {
        struct Node* last = (*head)->prev;
        if (temp->next == *head) { 
            free(temp);
            *head = NULL;
        } else {
            last->next = temp->next;
            temp->next->prev = last;
            *head = temp->next; 
            free(temp);
        }
        printf("%d deleted from the list.\n", value);
        return;
    }

    do {
        temp = temp->next;
    } while (temp != *head && temp->data != value);

    if (temp == *head) {  // Value not found
        printf("%d not found in the list.\n", value);
        return;
    }

    
    temp->prev->next = temp->next;
    temp->next->prev = temp->prev;
    free(temp);
    printf("%d deleted from the list.\n", value);
}


void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    printf("Circular Doubly Linked List: ");
    do {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("HEAD\n"); 
}

int main() {
    struct Node* head = NULL;
    int choice, value;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Delete a node\n");
        printf("4. Display list\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at beginning: ");
                scanf("%d", &value);
                insertAtBeginning(&head, value);
                break;
            case 2:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;
            case 4:
                displayList(head);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
