#include <stdio.h>
#include <ctype.h>  
#include <stdlib.h> 

#define MAX 100 

char stack[MAX];
int top = -1;

void push(char ch) {
    if (top == MAX - 1) {
        printf("Stack overflow!\n");
    } else {
        stack[++top] = ch;
    }
}


char pop() {
    if (top == -1) {
        printf("Stack underflow!\n");
        return -1;
    } else {
        return stack[top--];
    }
}


int precedence(char ch) {
    switch (ch) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}


void infixToPostfix(char infix[], char postfix[]) {
    int i = 0, j = 0;
    char ch;
    
    while (infix[i] != '\0') {
        ch = infix[i];
        
      
        if (isalnum(ch)) {
            postfix[j++] = ch;
        }

        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop();  // Discard the '('
        }
        
        else if (isOperator(ch)) {
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                postfix[j++] = pop();
            }
            push(ch);
        }
        
        i++;
    }
    
    while (top != -1) {
        postfix[j++] = pop();
    }
    
    postfix[j] = '\0'; 
}

int main() {
    char infix[MAX], postfix[MAX];
    
    printf("Enter infix expression: ");
    gets(infix);  
    
    infixToPostfix(infix, postfix);
    
    printf("Postfix expression: %s\n", postfix);
    
    return 0;
}
