#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(0);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

int isEmpty(struct Node* top) {
    return top == NULL;
}

void push(struct Node** top, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = *top;
    *top = newNode;
    printf("%d pushed onto the stack.\n", value);
}

int pop(struct Node** top) {
    if (isEmpty(*top)) {
        printf("Stack underflow! Cannot pop.\n");
        return -1;
    } else {
        struct Node* temp = *top;
        int poppedValue = temp->data;
        *top = (*top)->next;
        free(temp);
        return poppedValue;
    }
}


int peek(struct Node* top) {
    if (isEmpty(top)) {
        printf("Stack is empty!\n");
        return -1;
    } else {
        return top->data;
    }
}


void displayStack(struct Node* top) {
    if (isEmpty(top)) {
        printf("Stack is empty!\n");
    } else {
        printf("Stack elements are:\n");
        struct Node* temp = top;
        while (temp) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    struct Node* stack = NULL;  // Stack is initially empty
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    displayStack(stack);

    printf("Top element is %d\n", peek(stack));
    printf("Popped element is %d\n", pop(&stack));
    displayStack(stack);

    return 0;
}
